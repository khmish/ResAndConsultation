import {Component, OnInit} from '@angular/core';
import {animate, state, style, transition, trigger} from '@angular/animations';
import {DialogService, MessageService} from 'primeng/api';
import {SystemFunctionDsQueryHttpBody} from '../../../../service/data/httpBodies/user-privilages-http-body.service';
import {UserAccessService} from '../../../../service/user-access.service';
import {HttpResponse} from '@angular/common/http';
import {RfcCommitteeDecisionsService} from '../../../../service/data/rfc-committee-decisions.service';
import {RfcCommitteeManualApprovalComponent} from './rfc-committee-manual-approval/rfc-committee-manual-approval.component';

export class GetAllCommitteeDecisionRfcsDataBean {
  constructor(
    public rfcId: string,
    public rfcTitle: string,
    public rfcDescription: string,
    public fieldCode: string,
    public fieldArabicDescription: string,
    public fieldEnglishDescription: string,
    public orgId: string,
    public orgArabicName: string,
    public orgEnglishName: string,
    public orgContactName: string,
    public orgContactJob: string,
    public orgContactPhone: string,
    public orgContactEmail: string,
    public statusCode: string,
    public statusArabicDescription: string,
    public statusEnglishDescription: string
  ) {
  }
}

export class RfcMeetingDetailsBody {
  constructor(
    public rfcId: string,
    public  meetingElementDetails: Array<MeetingElementDetails>,
    public errorMessage: ErrorMessage
  ) {
  }
}

export class MeetingElementDetails {
  constructor(public meetingElementId: string,
              public  meetingSubject: string,
              public  meetingElementAStatus: string,
              public  meetingElementEStatus: string,
              public  teamId: string,
              public  surveyId: string,
              public  originalSubSystemId: string,
              public  originalEntityId: string,
              public recommendationHttpBodies: Array<RecommendationHttpBody>,
              public meetingHttpBody: MeetingHttpBody,
              public errorMessage: ErrorMessage,
              public approved: false
  ) {
  }
}

export class RecommendationHttpBody {
  constructor(
    public recId: string,
    public recText: string) {
  }
}

export class MeetingHttpBody {
  constructor(
    public meetingId: string,
    public meetingSubject: string,
    public teamId: string,
    public deleted: string,
    public meetingDate: string,
    public meetingSTime: string,
    public meetingETime: string) {
  }
}

export class ErrorMessage {
  constructor(
    public errorCode: string,
    public errorADescription: string,
    public errorEDescription: string
  ) {
  }
}

@Component({
  selector: 'app-rfc-committee-desisions',
  templateUrl: './rfc-committee-desisions.component.html',
  styleUrls: ['./rfc-committee-desisions.component.scss'],
  animations: [
    trigger('rowExpansionTrigger', [
      state('void', style({
        transform: 'translateX(-10%)',
        opacity: 0
      })),
      state('active', style({
        transform: 'translateX(0)',
        opacity: 1
      })),
      transition('* <=> *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
    ])
  ],
  providers: [DialogService, MessageService]
})
export class RfcCommitteeDesisionsComponent implements OnInit {
  allCommitteeDecisionRfcs: GetAllCommitteeDecisionRfcsDataBean[];

  cols: any[];

  selectedConsultation: GetAllCommitteeDecisionRfcsDataBean;

  selectedConsultation1: GetAllCommitteeDecisionRfcsDataBean;

  selRow: string;
  display = false;

  systemFunctionDsQueryHttpBodies: Array<SystemFunctionDsQueryHttpBody>;

  dsId: string;
  dsProcessVariables: string;
  dsProcessFilterFunctions: string;
  dsProcessVariablesSplitedArray: string[];
  dsProcessFilterFunctionsSplittedArray: string[];
  daFinalVariables = new Map();
  daFinalFilterFunctions = new Map();

  meetingElementBody: RfcMeetingDetailsBody;
  meetingElementDetails: Array<MeetingElementDetails>;
  recommendationHttpBodies: Array<RecommendationHttpBody>;
  meetingHttpBody: MeetingHttpBody;

  // tslint:disable-next-line:max-line-length
  constructor(private messageService: MessageService, public dialogService: DialogService, public userAccessService: UserAccessService, public allCommitteeDecisionService: RfcCommitteeDecisionsService) {
  }

  ngOnInit() {
    this.display = false;
    window.dispatchEvent(new Event('resize'));
    document.body.className = 'hold-transition skin-blue sidebar-mini';

    this.systemFunctionDsQueryHttpBodies = this.userAccessService.getSystemFunctionDsQueryHttpBody();
    console.log(this.systemFunctionDsQueryHttpBodies);
    // tslint:disable-next-line:prefer-for-of
    for (let i = 0; i < this.systemFunctionDsQueryHttpBodies.length; i++) {
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsId);
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsProcessVariables);
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsProcessFilterFunctions);

      this.dsId = this.systemFunctionDsQueryHttpBodies[i].dsId;
      this.dsProcessVariables = this.systemFunctionDsQueryHttpBodies[i].dsProcessVariables;
      this.dsProcessFilterFunctions = this.systemFunctionDsQueryHttpBodies[i].dsProcessFilterFunctions;


      if (this.dsProcessVariables === null) {
        this.dsProcessVariables = null;
      } else {
        this.dsProcessVariablesSplitedArray = this.dsProcessVariables.split(',');
        // tslint:disable-next-line:prefer-for-of no-shadowed-variable
        for (let i = 0; i < this.dsProcessVariablesSplitedArray.length; i++) {
          console.log(this.dsProcessVariablesSplitedArray[i]);
        }
      }


      if (this.dsProcessFilterFunctions === null) {
        this.dsProcessFilterFunctions = null;
      } else {
        this.dsProcessFilterFunctionsSplittedArray = this.dsProcessFilterFunctions.split(',');
        // tslint:disable-next-line:prefer-for-of no-shadowed-variable
        for (let i = 0; i < this.dsProcessFilterFunctionsSplittedArray.length; i++) {
          console.log(this.dsProcessFilterFunctionsSplittedArray[i]);
          // tslint:disable-next-line:max-line-length
          this.daFinalFilterFunctions.set(this.dsProcessFilterFunctionsSplittedArray[i], 'Task_05');
        }
      }


      this.allCommitteeDecisionService.sendJSONDataAndGetAllGMRfc(this.dsId,
        this.daFinalVariables,
        this.daFinalFilterFunctions).subscribe((res: HttpResponse<any>) => {
        console.log(res.body.dsQueryResult);
        this.allCommitteeDecisionRfcs = res.body.dsQueryResult;
        console.log('res.body -------' + this.allCommitteeDecisionRfcs);
      });
    }

    this.cols = [
      {field: 'rfcTitle', header: 'Title'},
      {field: 'fieldArabicDescription', header: 'Arabic Description'},
      {field: 'orgArabicName', header: 'Arabic Name'},
      {field: 'statusArabicDescription', header: 'Status (Ar)'}
    ];
  }

  loadRfcMeetingDetails($event) {
    // this.messageService.add({severity: 'info', summary: 'Rfc Id', detail: this.selectedConsultation.rfcId});
    const rfcId = this.selectedConsultation.rfcId;
    this.allCommitteeDecisionService.getRfcMeetingsDetails(rfcId).subscribe(res => {
      this.meetingElementBody = res;
      console.log('this.meetingElementBody: ' + this.meetingElementBody);
      console.log('this.meetingElementBody.errorMessage.errorCode : ' + this.meetingElementBody.errorMessage.errorCode);
      if (this.meetingElementBody.errorMessage.errorCode === '0') {
        this.meetingElementDetails = this.meetingElementBody.meetingElementDetails;
        console.log(this.meetingElementDetails);
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < this.meetingElementDetails.length; i++) {
          this.recommendationHttpBodies = this.meetingElementDetails[i].recommendationHttpBodies;
          this.meetingHttpBody = this.meetingElementDetails[i].meetingHttpBody;
        }
      } else {
        console.log(this.meetingElementBody.errorMessage.errorEDescription);
        this.showError(this.meetingElementBody.errorMessage.errorEDescription);
      }
    }, error => {
      this.showError('Service is down');
    });
  }

  // unloadRfcMeetingDetails($event) {
  //   this.messageService.add({severity: 'info', summary: 'Rfc Id', detail: this.selectedConsultation.rfcId});
  // }

  showSuccess(successMessage: string) {
    this.messageService.add({severity: 'success', summary: 'Success Message', detail: successMessage});
  }

  showError(errorMessage: string) {
    this.messageService.add({severity: 'error', summary: 'Error Message', detail: errorMessage});
  }

  rfcManualProcess(selCon: GetAllCommitteeDecisionRfcsDataBean) {
    this.selectedConsultation1 = selCon;
    this.selRow = this.selectedConsultation1 ? this.selectedConsultation1.rfcId : 'none';
    console.log(this.selRow);
    const ref = this.dialogService.open(RfcCommitteeManualApprovalComponent, {
      header: 'Manual Approval',
      width: '450px',
      contentStyle: {
        'max-height': '80%', overflow: 'auto'
      },
      closable: false
    });

    ref.onClose.subscribe(res => this.refreshPage());
  }

  refreshPage() {
    this.dialogService.dialogComponentRef.destroy();
  }

  rfcAutomaticProcess(selCon: GetAllCommitteeDecisionRfcsDataBean) {
    this.selectedConsultation1 = selCon;
    this.selRow = this.selectedConsultation1 ? this.selectedConsultation1.rfcId : 'none';
    console.log(this.selRow);
    this.allCommitteeDecisionService.automaticProcessApproval(this.selRow).subscribe((res: HttpResponse<any>) => {
      console.log(res.body.errorCode);
      if (res.body.errorCode === '0') {
        this.ngOnInit();
        this.showSuccess('Consultation Approved');
      } else {
        console.log(res.body.errorEDescription);
        this.showError(res.body.errorEDescription);
      }
    }, error => {
      this.showError('Service is down');
    });
  }
}
