import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';
import {RfcCommitteeDecisionsService} from '../../service/data/rfc-committee-decisions.service';
import {animate, state, style, transition, trigger} from '@angular/animations';
import {MessageService} from 'primeng/api';

export class RfcMeetingDetailsBody {
  constructor(
    public rfcId: string,
    public  meetingElementDetails: Array<MeetingElementDetails>,
    public errorMessage: ErrorMessage
  ) {
  }
}

export class MeetingElementDetails {
  constructor(public meetingElementId: string,
              public  meetingSubject: string,
              public  meetingElementAStatus: string,
              public  meetingElementEStatus: string,
              public  teamId: string,
              public  surveyId: string,
              public  originalSubSystemId: string,
              public  originalEntityId: string,
              public recommendationHttpBodies: Array<RecommendationHttpBody>,
              public meetingHttpBody: MeetingHttpBody,
              public errorMessage: ErrorMessage,
              public approved: false
  ) {
  }
}

export class RecommendationHttpBody {
  constructor(
    public recId: string,
    public recText: string) {
  }
}

export class MeetingHttpBody {
  constructor(
    public meetingId: string,
    public meetingSubject: string,
    public teamId: string,
    public deleted: string,
    public meetingDate: string,
    public meetingSTime: string,
    public meetingETime: string) {
  }
}

export class ErrorMessage {
  constructor(
    public errorCode: string,
    public errorADescription: string,
    public errorEDescription: string
  ) {
  }
}

@Component({
  selector: 'app-meeting-details',
  templateUrl: './meeting-details.component.html',
  styleUrls: ['./meeting-details.component.scss'],
  animations: [
    trigger('rowExpansionTrigger', [
      state('void', style({
        transform: 'translateX(-10%)',
        opacity: 0
      })),
      state('active', style({
        transform: 'translateX(0)',
        opacity: 1
      })),
      transition('* <=> *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
    ])
  ]
})
export class MeetingDetailsComponent implements OnInit, OnChanges {

  constructor(public allCommitteeDecisionService: RfcCommitteeDecisionsService, private messageService: MessageService) {

  }

  rfcId: string;
  @Input() meetingDetailsChild: string;

  meetingElementBody: RfcMeetingDetailsBody;
  meetingElementDetails: Array<MeetingElementDetails>;
  recommendationHttpBodies: Array<RecommendationHttpBody>;
  meetingHttpBody: MeetingHttpBody;

  ngOnInit() {
    console.log('this.meetingDetailsChild.rfcId' + this.meetingDetailsChild);
    this.rfcId = this.meetingDetailsChild;
    console.log('this.rfcId : ' + this.rfcId);

    if (this.rfcId !== null) {
      this.allCommitteeDecisionService.getRfcMeetingsDetails(this.rfcId).subscribe(res => {
        this.meetingElementBody = res;
        console.log('this.meetingElementBody: ' + this.meetingElementBody);
        console.log('this.meetingElementBody.errorMessage.errorCode : ' + this.meetingElementBody.errorMessage.errorCode);
        if (this.meetingElementBody.errorMessage.errorCode === '0') {
          this.meetingElementDetails = this.meetingElementBody.meetingElementDetails;
          console.log(this.meetingElementDetails);
          // tslint:disable-next-line:prefer-for-of
          for (let i = 0; i < this.meetingElementDetails.length; i++) {
            this.recommendationHttpBodies = this.meetingElementDetails[i].recommendationHttpBodies;
            this.meetingHttpBody = this.meetingElementDetails[i].meetingHttpBody;
          }

        } else {
          console.log(this.meetingElementBody.errorMessage.errorEDescription);
          this.showError(this.meetingElementBody.errorMessage.errorEDescription);
        }
      }, error => {
        this.showError('Service is down');
      });
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    console.log('Changed----------------> ' + changes.toString());
    this.ngOnInit();
  }

  showSuccess(successMessage: string) {
    this.messageService.add({severity: 'success', summary: 'Success Message', detail: successMessage});
  }

  showError(errorMessage: string) {
    this.messageService.add({severity: 'error', summary: 'Error Message', detail: errorMessage});
  }
}
