import {Component, OnInit} from '@angular/core';
import {animate, state, style, transition, trigger} from '@angular/animations';
import {DialogService, MessageService} from 'primeng/api';
import {SystemFunctionDsQueryHttpBody} from '../../../../../service/data/httpBodies/user-privilages-http-body.service';
import {UserAccessService} from '../../../../../service/user-access.service';
import {HttpResponse} from '@angular/common/http';
import {ReviewResultAndFinalDecisionService} from '../../../../../service/data/review-result-and-final-decision.service';
// tslint:disable-next-line:max-line-length
import {ReviewResultAndFinalDecisionRemarksComponent} from './review-result-and-final-decision-remarks/review-result-and-final-decision-remarks.component';
import {RemarksDetailsComponent} from '../../../../../reusableComponents/remarks-details/remarks-details.component';
import {GmReviewDeputyRejectService} from '../../../../../service/data/gm-review-deputy-reject.service';
import {GetConsulGmRfcDeputyRejectDataBean} from '../../consul-gm-new-rfcs/gm-review-deputy-reject/gm-review-deputy-reject.component';

export class GetAllRfcDataFinalDecisionBean {
  constructor(
    public rfcId: string,
    public rfcTitle: string,
    public rfcDescription: string,
    public fieldCode: string,
    public fieldArabicDescription: string,
    public fieldEnglishDescription: string,
    public orgId: string,
    public orgArabicName: string,
    public orgEnglishName: string,
    public orgContactName: string,
    public orgContactJob: string,
    public orgContactPhone: string,
    public orgContactEmail: string,
    public statusCode: string,
    public statusArabicDescription: string,
    public statusEnglishDescription: string
  ) {
  }
}

@Component({
  selector: 'app-review-result-and-final-decision',
  templateUrl: './review-result-and-final-decision.component.html',
  styleUrls: ['./review-result-and-final-decision.component.scss'],
  animations: [
    trigger('rowExpansionTrigger', [
      state('void', style({
        transform: 'translateX(-10%)',
        opacity: 0
      })),
      state('active', style({
        transform: 'translateX(0)',
        opacity: 1
      })),
      transition('* <=> *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
    ])
  ],
  providers: [DialogService, MessageService, RemarksDetailsComponent]
})
export class ReviewResultAndFinalDecisionComponent implements OnInit {
  selectedRfcForMeeting: string;
  allFinalConsultations: GetAllRfcDataFinalDecisionBean[];

  cols: any[];

  selectedConsultation: GetAllRfcDataFinalDecisionBean;

  selectedConsultation1: GetAllRfcDataFinalDecisionBean;

  selRow: string;
  display = false;

  systemFunctionDsQueryHttpBodies: Array<SystemFunctionDsQueryHttpBody>;

  dsId: string;
  dsProcessVariables: string;
  dsProcessFilterFunctions: string;
  dsProcessVariablesSplitedArray: string[];
  dsProcessFilterFunctionsSplittedArray: string[];
  daFinalVariables = new Map();
  daFinalFilterFunctions = new Map();

  selectedRfcForRemark: string;
  remarksVisible;

  // tslint:disable-next-line:max-line-length
  constructor(private messageService: MessageService, public dialogService: DialogService, public userAccessService: UserAccessService,
              private gmFinalReviewService: ReviewResultAndFinalDecisionService,
              private remarkComponent: RemarksDetailsComponent) {
  }

  ngOnInit() {
    this.selectedRfcForMeeting = null;
    this.display = false;
    window.dispatchEvent(new Event('resize'));
    document.body.className = 'hold-transition skin-blue sidebar-mini';

    this.systemFunctionDsQueryHttpBodies = this.userAccessService.getSystemFunctionDsQueryHttpBody();
    console.log(this.systemFunctionDsQueryHttpBodies);
    // tslint:disable-next-line:prefer-for-of
    for (let i = 0; i < this.systemFunctionDsQueryHttpBodies.length; i++) {
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsId);
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsProcessVariables);
      console.log(this.systemFunctionDsQueryHttpBodies[i].dsProcessFilterFunctions);

      this.dsId = this.systemFunctionDsQueryHttpBodies[i].dsId;
      this.dsProcessVariables = this.systemFunctionDsQueryHttpBodies[i].dsProcessVariables;
      this.dsProcessFilterFunctions = this.systemFunctionDsQueryHttpBodies[i].dsProcessFilterFunctions;


      if (this.dsProcessVariables === null) {
        this.dsProcessVariables = null;
      } else {
        this.dsProcessVariablesSplitedArray = this.dsProcessVariables.split(',');
        // tslint:disable-next-line:prefer-for-of no-shadowed-variable
        for (let i = 0; i < this.dsProcessVariablesSplitedArray.length; i++) {
          console.log(this.dsProcessVariablesSplitedArray[i]);
        }
      }


      if (this.dsProcessFilterFunctions === null) {
        this.dsProcessFilterFunctions = null;
      } else {
        this.dsProcessFilterFunctionsSplittedArray = this.dsProcessFilterFunctions.split(',');
        // tslint:disable-next-line:prefer-for-of no-shadowed-variable
        for (let i = 0; i < this.dsProcessFilterFunctionsSplittedArray.length; i++) {
          console.log(this.dsProcessFilterFunctionsSplittedArray[i]);
          // tslint:disable-next-line:max-line-length
          this.daFinalFilterFunctions.set(this.dsProcessFilterFunctionsSplittedArray[i], this.dsProcessFilterFunctionsSplittedArray[i] === 'taskAssignee' ? sessionStorage.getItem('authenticatedUser') : this.dsProcessFilterFunctionsSplittedArray[i] === 'taskUnassigned' ? '' : 'Task_08');
        }
      }


      this.gmFinalReviewService.sendJSONDataAndGetAllConsGMFinalRfc(this.dsId,
        this.daFinalVariables,
        this.daFinalFilterFunctions).subscribe((res: HttpResponse<any>) => {
        console.log(res.body.dsQueryResult);
        this.allFinalConsultations = res.body.dsQueryResult;
        console.log('res.body -------' + this.allFinalConsultations);
      });
    }
    // this.allRfcClient.getAllRfConsultations().subscribe(
    //   (response) => {
    //     this.allConsultations = response;
    //     console.log(this.allConsultations);
    //   }
    // );

    this.cols = [
      {field: 'rfcTitle', header: 'Title'},
      {field: 'fieldArabicDescription', header: 'Arabic Description'},
      // {field: 'fieldEnglishDescription', header: 'English Description'},
      {field: 'orgArabicName', header: 'Arabic Name'},
      // {field: 'orgEnglishName', header: 'English Name'},
      // {field: 'orgContactName', header: 'Contact Name'},
      // {field: 'orgContactJob', header: 'Contact Job'},
      // {field: 'orgContactPhone', header: 'Contact Phone'},
      // {field: 'orgContactEmail', header: 'Contact Email'},
      {field: 'statusArabicDescription', header: 'Status (Ar)'}
      // {field: 'statusEnglishDescription', header: 'Status (En)'}

    ];
  }

  reviewAndTakeFinalDecision(selCon: GetAllRfcDataFinalDecisionBean) {
    this.selectedConsultation1 = selCon;
    this.selRow = this.selectedConsultation1 ? this.selectedConsultation1.rfcId : 'none';
    console.log(this.selRow);
    const ref = this.dialogService.open(ReviewResultAndFinalDecisionRemarksComponent, {
      header: 'Review',
      width: '500px',
      contentStyle: {
        height: '250px', overflow: 'auto'
      },
      closable: false
    });

    ref.onClose.subscribe(res => this.refreshPage());
  }

  refreshPage() {
    this.dialogService.dialogComponentRef.destroy();
  }

  showSuccess(successMessage: string) {
    this.messageService.add({severity: 'success', summary: 'Success Message', detail: successMessage});
  }

  showError(errorMessage: string) {
    this.messageService.add({severity: 'error', summary: 'Error Message', detail: errorMessage});
  }

  loadRfcMeetingDetails($event) {
    // this.messageService.add({severity: 'info', summary: 'Rfc Id', detail: this.selectedConsultation.rfcId});
    const rfcId = this.selectedConsultation.rfcId;
    this.selectedRfcForMeeting = rfcId;

  }

  showRemarks(selCon: GetAllRfcDataFinalDecisionBean) {
    this.selectedConsultation1 = selCon;
    this.selRow = this.selectedConsultation1 ? this.selectedConsultation1.rfcId : 'none';
    console.log(this.selRow);
    this.remarksVisible = true;
    this.selectedRfcForRemark = this.selRow;
    this.remarkComponent.ngOnInit();

  }
}
